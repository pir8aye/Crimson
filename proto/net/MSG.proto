syntax = "proto2";
package com.subterranean_security.crimson.core.proto;

import "net/sequences/Chat.proto";
import "net/sequences/Login.proto";
import "net/sequences/Keylogger.proto";
import "net/sequences/ClientAuth.proto";
import "net/sequences/ClientControl.proto";
import "net/sequences/Generator.proto";
import "net/sequences/Report.proto";
import "net/sequences/Delta.proto";
import "net/sequences/FileManager.proto";
import "net/sequences/Log.proto";
import "net/sequences/Stream.proto";
import "net/sequences/CVID.proto";
import "net/sequences/Listener.proto";
import "net/sequences/Users.proto";
import "net/sequences/Update.proto";
import "net/sequences/State.proto";
import "net/sequences/Screenshot.proto";
import "net/sequences/Torrent.proto";
import "net/sequences/Network.proto";
import "net/sequences/Debug.proto";
import "net/misc/Misc.proto";

message Message {
	optional int32 id = 2;
	
	optional int32 rid = 3;
	optional int32 sid = 4;

	optional EV_StreamData ev_stream_data = 5;
	optional EV_EndpointClosed ev_endpoint_closed = 6;
	optional EV_ProfileDelta ev_profile_delta = 7;
	optional EV_ServerProfileDelta ev_server_profile_delta = 8;
	optional EV_ViewerProfileDelta ev_viewer_profile_delta = 9;
	optional EV_KEvent ev_kevent = 10;
	optional EV_ChatMessage ev_chat_message = 11;
	optional EV_NetworkDelta ev_network_delta = 12;
	
	// generic response for RS types which contain only a result and a comment
	optional Outcome rs_outcome = 99;
	
	optional RQ_Login rq_login = 100;
	optional RS_Login rs_login = 101;
	optional RQ_LoginChallenge rq_login_challenge = 102;
	optional RS_LoginChallenge rs_login_challenge = 103;
	optional RQ_GroupChallenge rq_group_challenge = 104;
	optional RS_GroupChallenge rs_group_challenge = 105;
	optional MI_GroupChallengeResult mi_challenge_result = 106;
	optional RQ_Generate rq_generate = 107;
	optional RS_Generate rs_generate = 108;
	optional RQ_FileListing rq_file_listing = 109;
	optional RS_FileListing rs_file_listing = 110;
	optional RQ_FileHandle rq_file_handle = 111;
	optional RS_FileHandle rs_file_handle = 112;
	optional RQ_AdvancedFileInfo rq_advanced_file_info = 113;
	optional RS_AdvancedFileInfo rs_advanced_file_info = 114;
	optional MI_CloseFileHandle mi_close_file_handle = 115;
	optional RQ_ChangeServerState rq_change_server_state = 116;
	optional RS_ChangeServerState rs_change_server_state = 117;
	optional RQ_ChangeClientState rq_change_client_state = 118;
	optional RS_ChangeClientState rs_change_client_state = 119;
	optional RQ_AddListener rq_add_listener = 120;
	optional RQ_RemoveListener rq_remove_listener = 122;
	optional RQ_AddUser rq_add_user = 124;
	optional RS_AddUser rs_add_user = 125;
	optional RQ_EditUser rq_edit_user = 126;
	optional RS_EditUser rs_edit_user = 127;
	optional RQ_KeyUpdate rq_key_update = 128;
	optional RS_KeyUpdate rs_key_update = 129;
	optional RQ_ChangeSetting rq_change_setting = 142;
	optional RS_ChangeSetting rs_change_setting = 143;
	optional RQ_CreateAuthMethod rq_create_auth_method = 130;
	optional RS_CreateAuthMethod rs_create_auth_method = 131;
	optional RQ_RemoveAuthMethod rq_remove_auth_method = 132;
	optional RS_RemoveAuthMethod rs_remove_auth_method = 133;
	optional RQ_GetClientConfig rq_get_client_config = 134;
	optional RS_GetClientConfig rs_get_client_config = 135;
	optional RQ_QuickScreenshot rq_quick_screenshot = 136;
	optional RS_QuickScreenshot rs_quick_screenshot = 137;
	optional RQ_Delete rq_delete = 138;
	optional RS_Delete rs_delete = 139;
	optional RQ_Logs rq_logs = 140;
	optional RS_Logs rs_logs = 141;
	optional RQ_Chat rq_chat = 144;
	optional RS_Chat rs_chat = 145;
	optional RQ_AddTorrent rq_add_torrent = 146;
	optional RS_AddTorrent rs_add_torrent = 147;
	
	// Network.proto
	optional RQ_DirectConnection rq_direct_connection = 148;
	optional RS_DirectConnection rs_direct_connection = 149;
	optional RQ_MakeDirectConnection rq_make_direct_connection = 150;
	optional RS_MakeDirectConnection rs_make_direct_connection = 151;

	optional MI_TriggerProfileDelta mi_trigger_profile_delta = 199;
	optional MI_StreamStart mi_stream_start = 200;
	optional MI_StreamStop mi_stream_stop = 201;
	optional MI_AuthRequest mi_auth_request = 202;
	optional MI_Report mi_report = 203;
	
	// CVID.proto
	optional RQ_Cvid rq_cvid = 204;
	optional RS_Cvid rs_cvid = 205;
	
	optional RQ_ServerInfo rq_server_info = 301;
	optional RS_ServerInfo rs_server_info = 302;
	optional RQ_CloudUser rq_cloud_user = 305;
	optional RS_CloudUser rs_cloud_user = 306;
	
	optional RQ_Ping rq_ping = 307;
	optional RS_Ping rs_ping = 308;
	
	// Debug.proto
	optional EV_DebugLogEvent ev_debug_log_event = 400;
	optional MI_DebugKill mi_debug_kill = 401;
	optional RQ_DebugSession rq_debug_session = 402;
	optional RS_DebugSession rs_debug_session = 403;
	

}